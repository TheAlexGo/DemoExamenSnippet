<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>LoginPage CSharp Snippet</Title>
			<Shortcut>LoginPageCS</Shortcut>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[
using Microsoft.EntityFrameworkCore;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;
using System.Windows.Threading;

namespace WPF_Demo_Exam.Pages
{
    /// <summary>
    /// Логика взаимодействия для LoginPage.xaml
    /// </summary>
    public partial class LoginPage : Page
    {
        private byte _failedCounter = 0;
        private DispatcherTimer _timer = new DispatcherTimer();
        private bool IsShowCaptcha = false;

        public LoginPage()
        {
            InitializeComponent();
            HiddenCaptcha();
        }
        private async void ButtonLogin_Click(object sender, RoutedEventArgs e)
        {
            if (!IsFilledFields())
            {
                MessageBox.Show("Не введён логин или пароль", "Внимание!", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            if (IsShowCaptcha)
            {
                if (TextBoxAnswerCaptcha.Text.Length == 0)
                {
                    MessageBox.Show("Не введена каптча", "Внимание!", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                else if (TextBoxAnswerCaptcha.Text != Captcha.CaptchaText)
                {
                    MessageBox.Show("Неверно введена капча!", "Ошибка при авторизации", MessageBoxButton.OK,
                                MessageBoxImage.Error);
                    UpdateCaptcha();
                    return;
                }
            }

            try
            {
                App.currentUser = await App.Context.Users.FirstOrDefaultAsync(e => e.UserLogin == TextBoxLogin.Text &&
                    e.UserPassword == PasswordBoxPassword.Password
                );

                if (App.currentUser != null)
                {
                    switch(_failedCounter)
                    {
                        case 0:
                        case 1:
                            _failedCounter = 0;
                            HiddenCaptcha();
                            NavigationService.Navigate(new ProductPage());
                            break;
                    }
                }
                else
                {
                    switch (_failedCounter)
                    {
                        case 0:
                            MessageBox.Show("Введён неверный логин или пароль", "Ошибка при авторизации", MessageBoxButton.OK,
                                MessageBoxImage.Error);
                            _failedCounter++;
                            IsShowCaptcha = true;
                            UpdateCaptcha();
                            ShowCaptcha();
                            break;
                        case 1:
                            MessageBox.Show("Авторизация не пройдена, кнопка заблокирована на 10 секунд", "Ошибка", MessageBoxButton.OK,
                                MessageBoxImage.Error);
                            ButtonLogin.IsEnabled = false;
                            _timer.Interval = TimeSpan.FromSeconds(10);
                            _timer.Tick += TimerTick;
                            _timer.Start();
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Ошибка при авторизации");
            }
        }

        private void ButtonClear_Click(object sender, RoutedEventArgs e)
        {
            CleanupTextBoxes();
        }

        private bool IsFilledFields()
        {
            return TextBoxLogin.Text.Length != 0 && PasswordBoxPassword.Password.Length != 0;
        }

        private void TimerTick(object? sender, EventArgs e)
        {
            _timer.Stop();
            ButtonLogin.IsEnabled = true;
            CleanupTextBoxes();
        }

        private void CleanupTextBoxes()
        {
            TextBoxLogin.Text = "";
            PasswordBoxPassword.Password = "";
            TextBoxAnswerCaptcha.Text = "";
            UpdateCaptcha();
        }

        private void HiddenCaptcha()
        {
            Captcha.Visibility = Visibility.Collapsed;
            TextBoxAnswerCaptcha.Visibility = Visibility.Collapsed;
            CleanupTextBoxes();
        }

        private void ShowCaptcha()
        {
            Captcha.Visibility = Visibility.Visible;
            TextBoxAnswerCaptcha.Visibility = Visibility.Visible;
        }

        private void UpdateCaptcha()
        {
            Captcha.CreateCaptcha(EasyCaptcha.Wpf.Captcha.LetterOption.Alphanumeric, 4);
        }
    }
}
                ]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
